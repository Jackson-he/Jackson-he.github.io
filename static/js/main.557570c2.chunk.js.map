{"version":3,"sources":["router.js","routes/home/index.js","routes/home/detail.js","routes/home/test.js","layout/basicLayout.js","registRouter.js","serviceWorker.js","index.js"],"names":["router","path","component","state","toDetail","id","_this","props","history","push","concat","console","log","_this2","this","contentArea","title","createTime","contentToShow","map","item","index","react_default","a","createElement","className","styles","key","onClick","bind","specification","content","main","Component","pageDetail","RouteComponents","Route","exact","style","wrapper","header","Switch","Redirect","to","test","registRouter","BrowserRouter","BasicLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_registRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAmBeA,EAfA,CACb,CACEC,KAAO,IACPC,qNCHFC,MAAQ,KAMRC,SAAW,SAACC,GACVC,EAAKC,MAAMC,QAAQC,KAAnB,cAAAC,OAAsCL,EAAtC,iGAHAM,QAAQC,IAAI,sCAKJ,IAAAC,EAAAC,KASFC,EARc,CAClB,CAAEV,GAAI,EAAGW,MAAO,oBAAqBC,WAAY,WAAYC,cAAe,aAC5E,CAAEb,GAAI,EAAGW,MAAO,cAAeC,WAAY,WAAYC,cAAe,aACtE,CAAEb,GAAI,EAAGW,MAAO,cAAeC,WAAY,WAAYC,cAAe,aACtE,CAAEb,GAAI,EAAGW,MAAO,cAAeC,WAAY,WAAYC,cAAe,aACtE,CAAEb,GAAI,EAAGW,MAAO,cAAeC,WAAY,WAAYC,cAAe,aACtE,CAAEb,GAAI,EAAGW,MAAO,cAAeC,WAAY,WAAYC,cAAe,cAExCC,IAAI,SAACC,EAAMC,GACzC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAO,gBAAiBC,IAAMN,EAAQO,QAAUf,EAAKT,SAASyB,KAAKhB,EAAMO,EAAKf,KAC7FiB,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOV,OAAUI,EAAKJ,OACvCM,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOI,eAAxB,iCAA+CV,EAAKH,YACpDK,EAAAC,EAAAC,cAAA,WAAOJ,EAAKF,kBAKlB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOK,SACtBT,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOM,MAASjB,GACjCO,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOL,gBAhCTY,cDMrB,CACEhC,KAAM,yBACNC,yOEJA,MAAO,sBAJc+B,cFUvB,CACEhC,KAAM,aACNC,uMGXAS,QAAQC,IAAI,KAAME,uCAGlB,MAAO,cALcmB,eCmBVC,mLAdX,IAAMC,EAAkBnC,EAAOmB,IAAI,SAACC,EAAMC,GAAP,OAAiBC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACpC,KAAMmB,EAAKnB,KAAM0B,IAAON,EAAQnB,UAAYkB,EAAKlB,cAElH,OACEoB,EAAAC,EAAAC,cAAA,OAAKc,MAAQZ,IAAOa,SAClBjB,EAAAC,EAAAC,cAAA,OAAKC,UAAYC,IAAOc,SACxBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACIN,EACFb,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAUC,GAAG,eATEV,aCDnBW,EAAO,kBAAMtB,EAAAC,EAAAC,cAAA,mCAaJqB,EAXM,kBACnBvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAEEnB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOnC,KAAK,SAASC,UAAY0C,IAEjCtB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOnC,KAAK,IAAIC,UAAY6C,OCAdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAWC,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.557570c2.chunk.js","sourcesContent":["import HomePage from './routes/home/index'\nimport PageDetail from './routes/home/detail'\nimport TestPage from './routes/home/test'\n\nconst router = [\n  {\n    path : '/',\n    component: HomePage\n  },\n  {\n    path: '/home/page/:id/detail/',\n    component: PageDetail\n  },\n  {\n    path: '/home/test',\n    component: TestPage\n  }\n]\n\nexport default router\n","import React, { Component } from 'react';\nimport styles from './index.scss'\n\nclass HomePage extends Component {\n  state = {\n\n  }\n  componentWillMount () {\n    console.log(999)\n  }\n  toDetail = (id) => {\n    this.props.history.push(`/home/page/${id}/detail`)\n  }\n  render () {\n    const contentList = [\n      { id: 1, title: \"you don't konw js\", createTime: '2018-2-1', contentToShow: 'blablabla'},\n      { id: 2, title: \"you konw js\", createTime: '2018-3-1', contentToShow: 'blablabla'},\n      { id: 3, title: \"you konw js\", createTime: '2018-3-1', contentToShow: 'blablabla'},\n      { id: 4, title: \"you konw js\", createTime: '2018-3-1', contentToShow: 'blablabla'},\n      { id: 5, title: \"you konw js\", createTime: '2018-3-1', contentToShow: 'blablabla'},\n      { id: 6, title: \"you konw js\", createTime: '2018-3-1', contentToShow: 'blablabla'},\n    ]\n    const contentArea = contentList.map((item, index) => {\n      return (\n        <div className={ styles['content-item']} key={ index } onClick={ this.toDetail.bind(this, item.id) }>\n          <div className={ styles.title }>{ item.title }</div>\n          <div className={ styles.specification }>创建日期：{ item.createTime }</div>\n          <div>{ item.contentToShow }</div>\n        </div>\n      )\n    })\n\n    return (\n      <div className={ styles.content }>\n        <div className={ styles.main }>{ contentArea }</div>\n        <div className={ styles.index }></div>\n      </div>\n    )\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from 'react';\n// import styles from './detail.scss'\n\nclass pageDetail extends Component {\n  componentWillMount () {\n  }\n  render () {\n    return '详情'\n  }\n}\n\nexport default pageDetail\n","import React, { Component } from 'react';\n\nclass pageDetail extends Component {\n  componentWillMount () {\n    console.log(8888, this)\n  }\n  render () {\n    return 'test'\n  }\n}\n\nexport default pageDetail\n","import React, { Component } from 'react';\nimport styles from './basicLayout.scss';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport router from '../router';\n\nclass pageDetail extends Component {\n  render () {\n    const RouteComponents = router.map((item, index) => <Route exact path={item.path} key ={ index } component={ item.component }/>)\n\n    return (\n      <div style={ styles.wrapper }>\n        <div className={ styles.header }></div>\n        <Switch>\n          { RouteComponents }\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default pageDetail\n","import { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport React from 'react';\nimport BasicLayout from './layout/basicLayout'\n\nconst test = () => <div>test without header</div>\n\nconst registRouter = () => (\n  <BrowserRouter>\n    <Switch>\n      {/* 不带header的页面 */}\n      <Route path=\"/other\" component={ test }></Route>\n      {/* 带header页面 */}\n      <Route path=\"/\" component={ BasicLayout }></Route>\n    </Switch>\n  </BrowserRouter>\n)\n\nexport default registRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Router from './registRouter'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}